{"version":3,"file":"static/js/46.2db9ad2b.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","redux/contacts/selectors.js","redux/filter/selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledContact = styled.p`\n  /* display: flex;\n  justify-content: space-between;\n  padding: 10px;\n  gap: 10px;\n  margin: 10px; */\n`;\n","import PropTypes from 'prop-types';\nimport { StyledContact } from './ContactItem.styled';\n\nexport const ContactItem = ({ contact: { name, phone } }) => {\n  return (\n    <>\n      <StyledContact>{name}</StyledContact>\n      <StyledContact>{phone}</StyledContact>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const StyledList = styled.ul`\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  margin: 10px;\n`;\n\nexport const StyledItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  padding: 10px;\n  gap: 10px;\n  margin: 10px;\n`;\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","export const selectFiltredContacts = state => {\n  return state.contacts.items.filter(contact =>\n    contact.name.toLowerCase().includes(state.filter)\n  );\n};\n","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport { StyledItem, StyledList } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { deleteContact, fetchContacts } from 'redux/contacts/operations';\nimport { useEffect } from 'react';\nimport { MagnifyingGlass } from 'react-loader-spinner';\nimport { selectFiltredContacts } from 'redux/filter/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filtredContacts = useSelector(selectFiltredContacts);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <StyledList>\n      {isLoading && !error && (\n        <MagnifyingGlass\n          visible={true}\n          height=\"80\"\n          width=\"80\"\n          ariaLabel=\"MagnifyingGlass-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"MagnifyingGlass-wrapper\"\n          glassColor=\"#c0efff\"\n          color=\"#e15b64\"\n        />\n      )}\n      {filtredContacts.map(contact => (\n        <StyledItem key={contact.id}>\n          <ContactItem contact={contact} />\n          <button onClick={() => dispatch(deleteContact(contact.id))}>\n            Delete\n          </button>\n        </StyledItem>\n      ))}\n      {error && <p>Sorry ERROR happened</p>}\n    </StyledList>\n  );\n};\n","import styled from 'styled-components';\nimport { Form as FormikForm } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: solid 1px;\n  padding: 10px;\n  gap: 10px;\n\n  margin: 10px;\n`;\n\nexport const ErrorText = styled.div`\n  color: red;\n  font-size: 14px;\n  margin-top: 5px;\n`;\n","import { Formik, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { ErrorText, Form } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const validationSchema = Yup.object().shape({\n    name: Yup.string()\n      .matches(/^[A-Za-z]+$/, 'Name must contain only letters')\n      .required('Name is required'),\n    phone: Yup.string()\n      .matches(/^[0-9]+$/, 'Number must contain only numbers')\n      .required('Number is required'),\n  });\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        phone: '',\n      }}\n      onSubmit={(values, { resetForm }) => {\n        const normalizeName = values.name.toLowerCase();\n        if (\n          contacts.find(contact => contact.name.toLowerCase() === normalizeName)\n        ) {\n          return alert(`${values.name} is already in contact list`);\n        }\n        dispatch(addContact(values));\n        resetForm();\n      }}\n      validationSchema={validationSchema}\n    >\n      <Form>\n        <label htmlFor=\"name\">Name</label>\n        <Field\n          type=\"text\"\n          name=\"name\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <label htmlFor=\"phone\">Number</label>\n        <Field\n          type=\"tel\"\n          name=\"phone\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <ErrorMessage name=\"name\" component={ErrorText} />\n        <ErrorMessage name=\"phone\" component={ErrorText} />\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FormField = styled.label`\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: solid 1px;\n  padding: 10px;\n  gap: 10px;\n  margin: 10px;\n`;\n","import { FormField } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { getUserInput } from 'redux/filter/slice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <FormField>\n      Find contact by name\n      <input\n        type=\"text\"\n        onChange={e => {\n          dispatch(getUserInput(e.currentTarget.value.toLowerCase()));\n        }}\n      />\n    </FormField>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { GlobalStyle } from 'components/GlobalStyles';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <title>Your contacts</title>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <GlobalStyle />;<h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["StyledContact","styled","_templateObject","_taggedTemplateLiteral","ContactItem","_ref","_ref$contact","contact","name","phone","_jsxs","_Fragment","children","_jsx","StyledList","StyledItem","_templateObject2","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFiltredContacts","filter","toLowerCase","includes","ContactList","dispatch","useDispatch","useSelector","filtredContacts","useEffect","fetchContacts","MagnifyingGlass","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","map","onClick","deleteContact","id","Form","FormikForm","ErrorText","ContactForm","validationSchema","Yup","shape","matches","required","Formik","initialValues","onSubmit","values","resetForm","normalizeName","find","alert","concat","addContact","htmlFor","Field","type","title","ErrorMessage","component","FormField","Filter","onChange","e","getUserInput","currentTarget","value","Contacts","GlobalStyle"],"sourceRoot":""}